name: Emergency review bypass

on:
  pull_request_target:
    types:
      - labeled

permissions: write-all

jobs:
  approve:
    name: Approve
    runs-on: ubuntu-latest
    if: github.event.label.name == 'emergency'
    steps:
    
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: 1184072
          private-key: ${{ secrets.MERGEMATE_KEY }}
          
      - name: Checkout branch
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          token: ${{ steps.app-token.outputs.token }}
          
      - name: Set up GitHub CLI
        run: gh auth status
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}

      - name: Debug PR API Response
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          REPO=${{ github.repository }}
      
          echo "Fetching PR details..."
          gh api repos/$REPO/pulls/$PR_NUMBER | tee pr_response.json

          REVIEWERS=$(gh api repos/$REPO/pulls/$PR_NUMBER --jq '.requested_reviewers | map(.login) | join(", ")')
          echo "Reviewers: ${REVIEWERS:-None}"
    
      - name: Get PR Reviewers using GH CLI
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          REPO=${{ github.repository }}

          echo "Fetching PR reviewers..."
          REVIEWERS=$(gh api repos/$REPO/pulls/$PR_NUMBER --jq '.requested_reviewers[].login')

          echo "Reviewers for PR #$PR_NUMBER:"
          echo "$REVIEWERS"

      - name: Get PR Reviewers
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          REPO=${{ github.repository }}

          echo "Fetching PR reviewers..."
          REVIEWERS=$(gh api repos/$REPO/pulls/$PR_NUMBER --jq '.requested_reviewers | map(.login) | join(", ")')
          TEAM_REVIEWERS=$(gh api repos/$REPO/pulls/$PR_NUMBER --jq '.requested_teams | map(.slug) | join(", ")')

          echo "Individual Reviewers: ${REVIEWERS:-None}"
          echo "Team Reviewers: ${TEAM_REVIEWERS:-None}"

          echo "REVIEWERS_LIST=$REVIEWERS" >> $GITHUB_ENV
          echo "TEAM_REVIEWERS_LIST=$TEAM_REVIEWERS" >> $GITHUB_ENV

      - name: Fetch Team Members of Requested Teams
        if: env.TEAM_REVIEWERS_LIST != ''
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
          ORG_NAME: "RodeTech"
        run: |
          echo "Fetching team members for: $TEAM_REVIEWERS_LIST"
          ALL_MEMBERS=""

          for TEAM in $TEAM_REVIEWERS_LIST; do
            echo "Fetching members of team: $TEAM"
            MEMBERS=$(gh api orgs/$ORG_NAME/teams/$TEAM/members --jq 'map(.login) | join(" ")' || echo "Error: Could not fetch team members")

            echo "Members of $TEAM: ${MEMBERS:-None}"
            ALL_MEMBERS="$ALL_MEMBERS $MEMBERS"
          done

          echo "ALL_TEAM_MEMBERS=$ALL_MEMBERS" >> $GITHUB_ENV
          
      - name: Check if PR Author is in CODEOWNERS
        id: check-codeowner
        run: |
          PR_AUTHOR="${{ github.event.pull_request.user.login }}"
          echo "Checking if PR Author ($PR_AUTHOR) is in the team..."

          if echo "$ALL_TEAM_MEMBERS" | grep -wq "$PR_AUTHOR"; then
            echo "‚úÖ PR Author is a member of the team!"
            echo "AUTHOR_IS_MEMBER=true" >> $GITHUB_ENV
          else
            echo "‚ùå PR Author is NOT a team member!"
            echo "AUTHOR_IS_MEMBER=false" >> $GITHUB_ENV
            exit 0  # Do NOT fail the workflow, just skip auto-merge
          fi
          
      - name: Approve
        if: env.AUTHOR_IS_MEMBER == 'true'
        uses: hmarr/auto-approve-action@f0939ea97e9205ef24d872e76833fa908a770363
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          
      - name: Merge PR
        if: env.AUTHOR_IS_MEMBER == 'true'
        run: |
          echo "üöÄ Attempting to auto-merge PR #$PR_NUMBER..."
          gh pr merge --admin --squash "$PR_URL" || echo "‚ö†Ô∏è Auto-merge failed. Check branch protections."
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
